/* tslint:disable */
/* eslint-disable */
/**
 * Partyview API
 * 합동방송을 간편하게 즐길 수 있는 Partyview 서비스를 위한 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CommonExceptionType
 */
export interface CommonExceptionType {
    /**
     * 
     * @type {number}
     * @memberof CommonExceptionType
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof CommonExceptionType
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof CommonExceptionType
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface CommonExceptionTypeType
 */
export interface CommonExceptionTypeType {
    /**
     * 
     * @type {number}
     * @memberof CommonExceptionTypeType
     */
    'statusCode': number;
    /**
     * 
     * @type {CommonExceptionTypeTypeMessage}
     * @memberof CommonExceptionTypeType
     */
    'message': CommonExceptionTypeTypeMessage;
    /**
     * 
     * @type {string}
     * @memberof CommonExceptionTypeType
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface CommonExceptionTypeTypeMessage
 */
export interface CommonExceptionTypeTypeMessage {
    /**
     * 
     * @type {number}
     * @memberof CommonExceptionTypeTypeMessage
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof CommonExceptionTypeTypeMessage
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof CommonExceptionTypeTypeMessage
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface NotBroadcastingException
 */
export interface NotBroadcastingException {
    /**
     * 
     * @type {number}
     * @memberof NotBroadcastingException
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof NotBroadcastingException
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof NotBroadcastingException
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface NotBroadcastingExceptionType
 */
export interface NotBroadcastingExceptionType {
    /**
     * 
     * @type {number}
     * @memberof NotBroadcastingExceptionType
     */
    'statusCode': number;
    /**
     * 
     * @type {NotBroadcastingExceptionTypeMessage}
     * @memberof NotBroadcastingExceptionType
     */
    'message': NotBroadcastingExceptionTypeMessage;
    /**
     * 
     * @type {string}
     * @memberof NotBroadcastingExceptionType
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface NotBroadcastingExceptionTypeMessage
 */
export interface NotBroadcastingExceptionTypeMessage {
    /**
     * 
     * @type {number}
     * @memberof NotBroadcastingExceptionTypeMessage
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof NotBroadcastingExceptionTypeMessage
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof NotBroadcastingExceptionTypeMessage
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Response404
 */
export interface Response404 {
    /**
     * 
     * @type {number}
     * @memberof Response404
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof Response404
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof Response404
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Response404Type
 */
export interface Response404Type {
    /**
     * 
     * @type {number}
     * @memberof Response404Type
     */
    'statusCode': number;
    /**
     * 
     * @type {Response404TypeMessage}
     * @memberof Response404Type
     */
    'message': Response404TypeMessage;
    /**
     * 
     * @type {string}
     * @memberof Response404Type
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface Response404TypeMessage
 */
export interface Response404TypeMessage {
    /**
     * 
     * @type {number}
     * @memberof Response404TypeMessage
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof Response404TypeMessage
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof Response404TypeMessage
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface StreamerDto
 */
export interface StreamerDto {
    /**
     * 스트리머 번호
     * @type {string}
     * @memberof StreamerDto
     */
    'id': string;
    /**
     * 스트리머 아이디
     * @type {string}
     * @memberof StreamerDto
     */
    'login': string;
    /**
     * 스트리머 닉네임
     * @type {string}
     * @memberof StreamerDto
     */
    'display_name': string;
    /**
     * 타입
     * @type {string}
     * @memberof StreamerDto
     */
    'type': string;
    /**
     * 스트리머 타입 (제휴 : affiliate, 파트너 : partner)
     * @type {string}
     * @memberof StreamerDto
     */
    'broadcaster_type': string;
    /**
     * 방송국 설명
     * @type {string}
     * @memberof StreamerDto
     */
    'description': string;
    /**
     * 프로필 이미지 URL
     * @type {string}
     * @memberof StreamerDto
     */
    'profile_image_url': string;
    /**
     * 방송국 오프라인 이미지 URL
     * @type {string}
     * @memberof StreamerDto
     */
    'offline_image_url': string;
    /**
     * 방송국 뷰 카운트
     * @type {number}
     * @memberof StreamerDto
     */
    'view_count': number;
    /**
     * 계정 생성일시
     * @type {string}
     * @memberof StreamerDto
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface StreamerDtoType
 */
export interface StreamerDtoType {
    /**
     * 
     * @type {number}
     * @memberof StreamerDtoType
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof StreamerDtoType
     */
    'message': string;
    /**
     * 
     * @type {StreamerDtoTypeData}
     * @memberof StreamerDtoType
     */
    'data': StreamerDtoTypeData;
}
/**
 * 
 * @export
 * @interface StreamerDtoTypeData
 */
export interface StreamerDtoTypeData {
    /**
     * 스트리머 번호
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'id': string;
    /**
     * 스트리머 아이디
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'login': string;
    /**
     * 스트리머 닉네임
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'display_name': string;
    /**
     * 타입
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'type': string;
    /**
     * 스트리머 타입 (제휴 : affiliate, 파트너 : partner)
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'broadcaster_type': string;
    /**
     * 방송국 설명
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'description': string;
    /**
     * 프로필 이미지 URL
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'profile_image_url': string;
    /**
     * 방송국 오프라인 이미지 URL
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'offline_image_url': string;
    /**
     * 방송국 뷰 카운트
     * @type {number}
     * @memberof StreamerDtoTypeData
     */
    'view_count': number;
    /**
     * 계정 생성일시
     * @type {string}
     * @memberof StreamerDtoTypeData
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface StreamerLiveDto
 */
export interface StreamerLiveDto {
    /**
     * 방송 ID
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'id': string;
    /**
     * 스트리머 번호
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'user_id': string;
    /**
     * 스트리머 아이디
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'user_login': string;
    /**
     * 스트리머 닉네임
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'user_name': string;
    /**
     * 게임 아이디
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'game_id': string;
    /**
     * 게임 이름
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'game_name': string;
    /**
     * 방송 타입 (200 응답시 무조건 live)
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'type': string;
    /**
     * 방송 제목
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'title': string;
    /**
     * 시청자 수
     * @type {number}
     * @memberof StreamerLiveDto
     */
    'viewer_count': number;
    /**
     * 방송 시작 시간
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'started_at': string;
    /**
     * 방송 언어
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'language': string;
    /**
     * 방송 URL ({width}와 {height}는 숫자로 대체해야 함)
     * @type {string}
     * @memberof StreamerLiveDto
     */
    'thumbnail_url': string;
    /**
     * 방송 태그 (방송 Off시 빈 배열 반환)
     * @type {Array<string>}
     * @memberof StreamerLiveDto
     */
    'tag_ids': Array<string>;
    /**
     * 성인인증 필요 여부 (채널 들어갔을 때 \"브로드캐스터가 이 채널을 성인 전용으로 표시했습니다.\"라고 뜨는 경우 true)
     * @type {boolean}
     * @memberof StreamerLiveDto
     */
    'is_mature': boolean;
}
/**
 * 
 * @export
 * @interface StreamerLiveDtoType
 */
export interface StreamerLiveDtoType {
    /**
     * 
     * @type {number}
     * @memberof StreamerLiveDtoType
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof StreamerLiveDtoType
     */
    'message': string;
    /**
     * 
     * @type {StreamerLiveDtoTypeData}
     * @memberof StreamerLiveDtoType
     */
    'data': StreamerLiveDtoTypeData;
}
/**
 * 
 * @export
 * @interface StreamerLiveDtoTypeData
 */
export interface StreamerLiveDtoTypeData {
    /**
     * 방송 ID
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'id': string;
    /**
     * 스트리머 번호
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'user_id': string;
    /**
     * 스트리머 아이디
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'user_login': string;
    /**
     * 스트리머 닉네임
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'user_name': string;
    /**
     * 게임 아이디
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'game_id': string;
    /**
     * 게임 이름
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'game_name': string;
    /**
     * 방송 타입 (200 응답시 무조건 live)
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'type': string;
    /**
     * 방송 제목
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'title': string;
    /**
     * 시청자 수
     * @type {number}
     * @memberof StreamerLiveDtoTypeData
     */
    'viewer_count': number;
    /**
     * 방송 시작 시간
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'started_at': string;
    /**
     * 방송 언어
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'language': string;
    /**
     * 방송 URL ({width}와 {height}는 숫자로 대체해야 함)
     * @type {string}
     * @memberof StreamerLiveDtoTypeData
     */
    'thumbnail_url': string;
    /**
     * 방송 태그 (방송 Off시 빈 배열 반환)
     * @type {Array<string>}
     * @memberof StreamerLiveDtoTypeData
     */
    'tag_ids': Array<string>;
    /**
     * 성인인증 필요 여부 (채널 들어갔을 때 \"브로드캐스터가 이 채널을 성인 전용으로 표시했습니다.\"라고 뜨는 경우 true)
     * @type {boolean}
     * @memberof StreamerLiveDtoTypeData
     */
    'is_mature': boolean;
}
/**
 * 
 * @export
 * @interface StreamerSearchLiveDto
 */
export interface StreamerSearchLiveDto {
    /**
     * 방송 언어
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'broadcaster_language': string;
    /**
     * 스트리머 아이디
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'broadcaster_login': string;
    /**
     * 스트리머 닉네임
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'display_name': string;
    /**
     * 게임 아이디
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'game_id': string;
    /**
     * 게임 이름
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'game_name': string;
    /**
     * 스트리머 번호
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'id': string;
    /**
     * 생방송 여부
     * @type {boolean}
     * @memberof StreamerSearchLiveDto
     */
    'is_live': boolean;
    /**
     * 방송 태그 (방송 Off시 빈 배열 반환)
     * @type {Array<string>}
     * @memberof StreamerSearchLiveDto
     */
    'tag_ids': Array<string>;
    /**
     * 스트리머 프로필 이미지
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'thumbnail_url': string;
    /**
     * 방송 제목
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'title': string;
    /**
     * 방송 시작 시간
     * @type {string}
     * @memberof StreamerSearchLiveDto
     */
    'started_at': string;
}
/**
 * 
 * @export
 * @interface StreamerSearchLiveDtoArrayType
 */
export interface StreamerSearchLiveDtoArrayType {
    /**
     * 
     * @type {number}
     * @memberof StreamerSearchLiveDtoArrayType
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof StreamerSearchLiveDtoArrayType
     */
    'message': string;
    /**
     * 
     * @type {Array<StreamerSearchLiveDto>}
     * @memberof StreamerSearchLiveDtoArrayType
     */
    'data': Array<StreamerSearchLiveDto>;
}
/**
 * 
 * @export
 * @interface StreamerTgdDto
 */
export interface StreamerTgdDto {
    /**
     * 트게더 게시판 이름
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'title': string;
    /**
     * 트게더 게시판 타입
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'type': string;
    /**
     * 게시판 프로필 이미지
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'profileImageUrl': string;
    /**
     * 게시판 배경 이미지
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'backgroundImageUrl': string | null;
    /**
     * 테마 색상
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'color': string;
    /**
     * 트게더 게시판 즐겨찾기 여부
     * @type {boolean}
     * @memberof StreamerTgdDto
     */
    'favorite': boolean;
    /**
     * 트위치 생방송 여부
     * @type {boolean}
     * @memberof StreamerTgdDto
     */
    'isLive': boolean;
    /**
     * 트게더 알림 타입
     * @type {boolean}
     * @memberof StreamerTgdDto
     */
    'alertType': boolean;
    /**
     * 트위치 URL
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'twitchUrl': string;
    /**
     * 유튜브 URL
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'youtubeUrl': string;
    /**
     * 트윕 URL
     * @type {string}
     * @memberof StreamerTgdDto
     */
    'twipUrl': string;
    /**
     * 게시판 점수
     * @type {number}
     * @memberof StreamerTgdDto
     */
    'boardScore': number;
    /**
     * 게시판 즐겨찾기 수
     * @type {number}
     * @memberof StreamerTgdDto
     */
    'favoCount': number;
    /**
     * 게시판 카테고리
     * @type {Array<TgdCategory>}
     * @memberof StreamerTgdDto
     */
    'categories': Array<TgdCategory>;
}
/**
 * 
 * @export
 * @interface StreamerTgdDtoType
 */
export interface StreamerTgdDtoType {
    /**
     * 
     * @type {number}
     * @memberof StreamerTgdDtoType
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof StreamerTgdDtoType
     */
    'message': string;
    /**
     * 
     * @type {StreamerTgdDtoTypeData}
     * @memberof StreamerTgdDtoType
     */
    'data': StreamerTgdDtoTypeData;
}
/**
 * 
 * @export
 * @interface StreamerTgdDtoTypeData
 */
export interface StreamerTgdDtoTypeData {
    /**
     * 트게더 게시판 이름
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'title': string;
    /**
     * 트게더 게시판 타입
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'type': string;
    /**
     * 게시판 프로필 이미지
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'profileImageUrl': string;
    /**
     * 게시판 배경 이미지
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'backgroundImageUrl': string | null;
    /**
     * 테마 색상
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'color': string;
    /**
     * 트게더 게시판 즐겨찾기 여부
     * @type {boolean}
     * @memberof StreamerTgdDtoTypeData
     */
    'favorite': boolean;
    /**
     * 트위치 생방송 여부
     * @type {boolean}
     * @memberof StreamerTgdDtoTypeData
     */
    'isLive': boolean;
    /**
     * 트게더 알림 타입
     * @type {boolean}
     * @memberof StreamerTgdDtoTypeData
     */
    'alertType': boolean;
    /**
     * 트위치 URL
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'twitchUrl': string;
    /**
     * 유튜브 URL
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'youtubeUrl': string;
    /**
     * 트윕 URL
     * @type {string}
     * @memberof StreamerTgdDtoTypeData
     */
    'twipUrl': string;
    /**
     * 게시판 점수
     * @type {number}
     * @memberof StreamerTgdDtoTypeData
     */
    'boardScore': number;
    /**
     * 게시판 즐겨찾기 수
     * @type {number}
     * @memberof StreamerTgdDtoTypeData
     */
    'favoCount': number;
    /**
     * 게시판 카테고리
     * @type {Array<TgdCategory>}
     * @memberof StreamerTgdDtoTypeData
     */
    'categories': Array<TgdCategory>;
}
/**
 * 
 * @export
 * @interface StreamerTwipDto
 */
export interface StreamerTwipDto {
    /**
     * 
     * @type {StreamerTwipDtoStreamer}
     * @memberof StreamerTwipDto
     */
    'streamer': StreamerTwipDtoStreamer;
    /**
     * 
     * @type {StreamerTwipDtoMenuEnables}
     * @memberof StreamerTwipDto
     */
    'menuEnables': StreamerTwipDtoMenuEnables;
    /**
     * 트윕 포인트 이름
     * @type {string}
     * @memberof StreamerTwipDto
     */
    'pointName': string | null;
    /**
     * 
     * @type {StreamerTwipDtoDonateInfo}
     * @memberof StreamerTwipDto
     */
    'donateInfo': StreamerTwipDtoDonateInfo;
    /**
     * 스트리머 후원 이미지 (트윕 PRO 이용시에 설정 가능, 없을 경우 : 빈 배열 반환)
     * @type {Array<TwipCustomDonateImage>}
     * @memberof StreamerTwipDto
     */
    'customDonateImages': Array<TwipCustomDonateImage>;
}
/**
 * 트윕 후원 규칙
 * @export
 * @interface StreamerTwipDtoDonateInfo
 */
export interface StreamerTwipDtoDonateInfo {
    /**
     * 후원 팔로우 제한
     * @type {boolean}
     * @memberof StreamerTwipDtoDonateInfo
     */
    'isFollowOnly': boolean;
    /**
     * 후원 최소 금액
     * @type {number}
     * @memberof StreamerTwipDtoDonateInfo
     */
    'minimumCash': number;
    /**
     * 제안하는 캐시
     * @type {number}
     * @memberof StreamerTwipDtoDonateInfo
     */
    'placeholderCash': number;
    /**
     * 후원 닉네임 고정 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoDonateInfo
     */
    'isStrictName': boolean;
    /**
     * 시청자 이미지팩 허용 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoDonateInfo
     */
    'isAllowWatcherImage': boolean;
    /**
     * 최대 메세지 길이
     * @type {number}
     * @memberof StreamerTwipDtoDonateInfo
     */
    'maximumMessageLength': number;
    /**
     * 후원 금액별 글자수 설정 (0일 경우 미설정 상태, 설명 : https://support.twip.kr/hc/ko/articles/900001201266)
     * @type {number}
     * @memberof StreamerTwipDtoDonateInfo
     */
    'messageLengthLevel': number;
}
/**
 * 트윕 메뉴별 활성화 여부
 * @export
 * @interface StreamerTwipDtoMenuEnables
 */
export interface StreamerTwipDtoMenuEnables {
    /**
     * 트윕 후원 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'donate': boolean;
    /**
     * 트윕 음성 후원 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'audio': boolean;
    /**
     * 트윕 영상 후원 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'media': boolean;
    /**
     * 트윕 미션 후원 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'mission': boolean;
    /**
     * 트윕 파티 후원 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'party': boolean;
    /**
     * 트윕 포인트 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'point': boolean;
    /**
     * 트윕 슬롯머신 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'slot': boolean;
    /**
     * 트윕 마켓 후원 활성화 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoMenuEnables
     */
    'market': boolean;
}
/**
 * 스트리머 정보
 * @export
 * @interface StreamerTwipDtoStreamer
 */
export interface StreamerTwipDtoStreamer {
    /**
     * 스트리머 번호
     * @type {number}
     * @memberof StreamerTwipDtoStreamer
     */
    'id': number;
    /**
     * 스트리머 아이디
     * @type {string}
     * @memberof StreamerTwipDtoStreamer
     */
    'name': string;
    /**
     * 스트리머 닉네임
     * @type {string}
     * @memberof StreamerTwipDtoStreamer
     */
    'displayName': string;
    /**
     * 스트리머 설명 (트윕에서 설정)
     * @type {string}
     * @memberof StreamerTwipDtoStreamer
     */
    'description': string;
    /**
     * 스트리머 테마 색상 (트윕에서 설정)
     * @type {string}
     * @memberof StreamerTwipDtoStreamer
     */
    'primaryColor': string;
    /**
     * 트윕 후원페이지 배경 이미지 URL (트윕에서 설정)
     * @type {string}
     * @memberof StreamerTwipDtoStreamer
     */
    'backgroundImageUrl': string;
    /**
     * 트윕 PRO 여부
     * @type {boolean}
     * @memberof StreamerTwipDtoStreamer
     */
    'isPro': boolean;
    /**
     * 스트리머 프로필 이미지 URL
     * @type {string}
     * @memberof StreamerTwipDtoStreamer
     */
    'logoUrl': string;
}
/**
 * 
 * @export
 * @interface StreamerTwipDtoType
 */
export interface StreamerTwipDtoType {
    /**
     * 
     * @type {number}
     * @memberof StreamerTwipDtoType
     */
    'status': number;
    /**
     * 
     * @type {string}
     * @memberof StreamerTwipDtoType
     */
    'message': string;
    /**
     * 
     * @type {StreamerTwipDtoTypeData}
     * @memberof StreamerTwipDtoType
     */
    'data': StreamerTwipDtoTypeData;
}
/**
 * 
 * @export
 * @interface StreamerTwipDtoTypeData
 */
export interface StreamerTwipDtoTypeData {
    /**
     * 
     * @type {StreamerTwipDtoStreamer}
     * @memberof StreamerTwipDtoTypeData
     */
    'streamer': StreamerTwipDtoStreamer;
    /**
     * 
     * @type {StreamerTwipDtoMenuEnables}
     * @memberof StreamerTwipDtoTypeData
     */
    'menuEnables': StreamerTwipDtoMenuEnables;
    /**
     * 트윕 포인트 이름
     * @type {string}
     * @memberof StreamerTwipDtoTypeData
     */
    'pointName': string | null;
    /**
     * 
     * @type {StreamerTwipDtoDonateInfo}
     * @memberof StreamerTwipDtoTypeData
     */
    'donateInfo': StreamerTwipDtoDonateInfo;
    /**
     * 스트리머 후원 이미지 (트윕 PRO 이용시에 설정 가능, 없을 경우 : 빈 배열 반환)
     * @type {Array<TwipCustomDonateImage>}
     * @memberof StreamerTwipDtoTypeData
     */
    'customDonateImages': Array<TwipCustomDonateImage>;
}
/**
 * 
 * @export
 * @interface TgdCategory
 */
export interface TgdCategory {
    /**
     * 게시판 이름
     * @type {string}
     * @memberof TgdCategory
     */
    'title': string;
    /**
     * 게시판 번호
     * @type {string}
     * @memberof TgdCategory
     */
    'categoryId': string;
    /**
     * 게시판 색상
     * @type {string}
     * @memberof TgdCategory
     */
    'color': string;
    /**
     * 게시판 권한 (admin | any)
     * @type {string}
     * @memberof TgdCategory
     */
    'auth': string;
    /**
     * 게시판 순서
     * @type {string}
     * @memberof TgdCategory
     */
    'order': string;
}
/**
 * 
 * @export
 * @interface TgdException
 */
export interface TgdException {
    /**
     * 
     * @type {number}
     * @memberof TgdException
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof TgdException
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof TgdException
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TgdExceptionType
 */
export interface TgdExceptionType {
    /**
     * 
     * @type {number}
     * @memberof TgdExceptionType
     */
    'statusCode': number;
    /**
     * 
     * @type {TgdExceptionTypeMessage}
     * @memberof TgdExceptionType
     */
    'message': TgdExceptionTypeMessage;
    /**
     * 
     * @type {string}
     * @memberof TgdExceptionType
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TgdExceptionTypeMessage
 */
export interface TgdExceptionTypeMessage {
    /**
     * 
     * @type {number}
     * @memberof TgdExceptionTypeMessage
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof TgdExceptionTypeMessage
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof TgdExceptionTypeMessage
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TwipCustomDonateImage
 */
export interface TwipCustomDonateImage {
    /**
     * 
     * @type {TwipCustomDonateImageId}
     * @memberof TwipCustomDonateImage
     */
    'id': TwipCustomDonateImageId;
    /**
     * 후원 이미지 이름
     * @type {string}
     * @memberof TwipCustomDonateImage
     */
    'title': string;
    /**
     * 후원 이미지 URL
     * @type {string}
     * @memberof TwipCustomDonateImage
     */
    'thumbnailUrl': string;
    /**
     * 후원 이미지 타입
     * @type {number}
     * @memberof TwipCustomDonateImage
     */
    'type': number;
}
/**
 * @type TwipCustomDonateImageId
 * 후원 이미지 ID
 * @export
 */
export type TwipCustomDonateImageId = number | string;

/**
 * 
 * @export
 * @interface TwipDonateInfo
 */
export interface TwipDonateInfo {
    /**
     * 후원 팔로우 제한
     * @type {boolean}
     * @memberof TwipDonateInfo
     */
    'isFollowOnly': boolean;
    /**
     * 후원 최소 금액
     * @type {number}
     * @memberof TwipDonateInfo
     */
    'minimumCash': number;
    /**
     * 제안하는 캐시
     * @type {number}
     * @memberof TwipDonateInfo
     */
    'placeholderCash': number;
    /**
     * 후원 닉네임 고정 여부
     * @type {boolean}
     * @memberof TwipDonateInfo
     */
    'isStrictName': boolean;
    /**
     * 시청자 이미지팩 허용 여부
     * @type {boolean}
     * @memberof TwipDonateInfo
     */
    'isAllowWatcherImage': boolean;
    /**
     * 최대 메세지 길이
     * @type {number}
     * @memberof TwipDonateInfo
     */
    'maximumMessageLength': number;
    /**
     * 후원 금액별 글자수 설정 (0일 경우 미설정 상태, 설명 : https://support.twip.kr/hc/ko/articles/900001201266)
     * @type {number}
     * @memberof TwipDonateInfo
     */
    'messageLengthLevel': number;
}
/**
 * 
 * @export
 * @interface TwipException
 */
export interface TwipException {
    /**
     * 
     * @type {number}
     * @memberof TwipException
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof TwipException
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof TwipException
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TwipExceptionType
 */
export interface TwipExceptionType {
    /**
     * 
     * @type {number}
     * @memberof TwipExceptionType
     */
    'statusCode': number;
    /**
     * 
     * @type {TwipExceptionTypeMessage}
     * @memberof TwipExceptionType
     */
    'message': TwipExceptionTypeMessage;
    /**
     * 
     * @type {string}
     * @memberof TwipExceptionType
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TwipExceptionTypeMessage
 */
export interface TwipExceptionTypeMessage {
    /**
     * 
     * @type {number}
     * @memberof TwipExceptionTypeMessage
     */
    'statusCode': number;
    /**
     * 
     * @type {object}
     * @memberof TwipExceptionTypeMessage
     */
    'message': object;
    /**
     * 
     * @type {string}
     * @memberof TwipExceptionTypeMessage
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface TwipMenuEnables
 */
export interface TwipMenuEnables {
    /**
     * 트윕 후원 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'donate': boolean;
    /**
     * 트윕 음성 후원 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'audio': boolean;
    /**
     * 트윕 영상 후원 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'media': boolean;
    /**
     * 트윕 미션 후원 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'mission': boolean;
    /**
     * 트윕 파티 후원 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'party': boolean;
    /**
     * 트윕 포인트 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'point': boolean;
    /**
     * 트윕 슬롯머신 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'slot': boolean;
    /**
     * 트윕 마켓 후원 활성화 여부
     * @type {boolean}
     * @memberof TwipMenuEnables
     */
    'market': boolean;
}
/**
 * 
 * @export
 * @interface TwipStreamer
 */
export interface TwipStreamer {
    /**
     * 스트리머 번호
     * @type {number}
     * @memberof TwipStreamer
     */
    'id': number;
    /**
     * 스트리머 아이디
     * @type {string}
     * @memberof TwipStreamer
     */
    'name': string;
    /**
     * 스트리머 닉네임
     * @type {string}
     * @memberof TwipStreamer
     */
    'displayName': string;
    /**
     * 스트리머 설명 (트윕에서 설정)
     * @type {string}
     * @memberof TwipStreamer
     */
    'description': string;
    /**
     * 스트리머 테마 색상 (트윕에서 설정)
     * @type {string}
     * @memberof TwipStreamer
     */
    'primaryColor': string;
    /**
     * 트윕 후원페이지 배경 이미지 URL (트윕에서 설정)
     * @type {string}
     * @memberof TwipStreamer
     */
    'backgroundImageUrl': string;
    /**
     * 트윕 PRO 여부
     * @type {boolean}
     * @memberof TwipStreamer
     */
    'isPro': boolean;
    /**
     * 스트리머 프로필 이미지 URL
     * @type {string}
     * @memberof TwipStreamer
     */
    'logoUrl': string;
}

/**
 * LinkApi - axios parameter creator
 * @export
 */
export const LinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkControllerCreateLink: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkControllerDeleteLink: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LinkApi - functional programming interface
 * @export
 */
export const LinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LinkApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkControllerCreateLink(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkControllerCreateLink(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkControllerDeleteLink(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkControllerDeleteLink(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LinkApi - factory interface
 * @export
 */
export const LinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LinkApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkControllerCreateLink(options?: any): AxiosPromise<void> {
            return localVarFp.linkControllerCreateLink(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkControllerDeleteLink(options?: any): AxiosPromise<void> {
            return localVarFp.linkControllerDeleteLink(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LinkApi - object-oriented interface
 * @export
 * @class LinkApi
 * @extends {BaseAPI}
 */
export class LinkApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkApi
     */
    public linkControllerCreateLink(options?: AxiosRequestConfig) {
        return LinkApiFp(this.configuration).linkControllerCreateLink(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LinkApi
     */
    public linkControllerDeleteLink(options?: AxiosRequestConfig) {
        return LinkApiFp(this.configuration).linkControllerDeleteLink(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StreamerApi - axios parameter creator
 * @export
 */
export const StreamerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 스트리머 ID로 조회
         * @param {number} id 스트리머 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('streamerControllerGetId', 'id', id)
            const localVarPath = `/streamer/id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스트리머 생방송 여부 조회 ID로 조회
         * @param {number} id 스트리머 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetIdLive: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('streamerControllerGetIdLive', 'id', id)
            const localVarPath = `/streamer/id/{id}/live`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스트리머 이름으로 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('streamerControllerGetName', 'name', name)
            const localVarPath = `/streamer/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스트리머 생방송 여부 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetNameLive: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('streamerControllerGetNameLive', 'name', name)
            const localVarPath = `/streamer/name/{name}/live`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 트게더 API Route
         * @summary 스트리머 트게더 게시판 존재 여부 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetNameTgd: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('streamerControllerGetNameTgd', 'name', name)
            const localVarPath = `/streamer/name/{name}/tgd`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * api.twip.kr/user/{username} API Route (프론트에서 fallback으로 twip api 직접 호출해서 사용해도 무방)
         * @summary 스트리머 트윕 정보 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetNameTwip: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('streamerControllerGetNameTwip', 'name', name)
            const localVarPath = `/streamer/name/{name}/twip`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 스트리머 검색
         * @param {string} q 검색어 (2자 이상)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetSearch: async (q: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('streamerControllerGetSearch', 'q', q)
            const localVarPath = `/streamer/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamerApi - functional programming interface
 * @export
 */
export const StreamerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreamerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 스트리머 ID로 조회
         * @param {number} id 스트리머 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamerControllerGetId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerDtoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamerControllerGetId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스트리머 생방송 여부 조회 ID로 조회
         * @param {number} id 스트리머 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamerControllerGetIdLive(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerLiveDtoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamerControllerGetIdLive(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스트리머 이름으로 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamerControllerGetName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerDtoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamerControllerGetName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스트리머 생방송 여부 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamerControllerGetNameLive(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerLiveDtoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamerControllerGetNameLive(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 트게더 API Route
         * @summary 스트리머 트게더 게시판 존재 여부 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamerControllerGetNameTgd(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerTgdDtoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamerControllerGetNameTgd(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * api.twip.kr/user/{username} API Route (프론트에서 fallback으로 twip api 직접 호출해서 사용해도 무방)
         * @summary 스트리머 트윕 정보 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamerControllerGetNameTwip(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerTwipDtoType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamerControllerGetNameTwip(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 스트리머 검색
         * @param {string} q 검색어 (2자 이상)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamerControllerGetSearch(q: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StreamerSearchLiveDtoArrayType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamerControllerGetSearch(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StreamerApi - factory interface
 * @export
 */
export const StreamerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreamerApiFp(configuration)
    return {
        /**
         * 
         * @summary 스트리머 ID로 조회
         * @param {number} id 스트리머 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetId(id: number, options?: any): AxiosPromise<StreamerDtoType> {
            return localVarFp.streamerControllerGetId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스트리머 생방송 여부 조회 ID로 조회
         * @param {number} id 스트리머 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetIdLive(id: number, options?: any): AxiosPromise<StreamerLiveDtoType> {
            return localVarFp.streamerControllerGetIdLive(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스트리머 이름으로 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetName(name: string, options?: any): AxiosPromise<StreamerDtoType> {
            return localVarFp.streamerControllerGetName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스트리머 생방송 여부 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetNameLive(name: string, options?: any): AxiosPromise<StreamerLiveDtoType> {
            return localVarFp.streamerControllerGetNameLive(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 트게더 API Route
         * @summary 스트리머 트게더 게시판 존재 여부 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetNameTgd(name: string, options?: any): AxiosPromise<StreamerTgdDtoType> {
            return localVarFp.streamerControllerGetNameTgd(name, options).then((request) => request(axios, basePath));
        },
        /**
         * api.twip.kr/user/{username} API Route (프론트에서 fallback으로 twip api 직접 호출해서 사용해도 무방)
         * @summary 스트리머 트윕 정보 조회
         * @param {string} name 스트리머 로그인 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetNameTwip(name: string, options?: any): AxiosPromise<StreamerTwipDtoType> {
            return localVarFp.streamerControllerGetNameTwip(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 스트리머 검색
         * @param {string} q 검색어 (2자 이상)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamerControllerGetSearch(q: string, options?: any): AxiosPromise<StreamerSearchLiveDtoArrayType> {
            return localVarFp.streamerControllerGetSearch(q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamerApi - object-oriented interface
 * @export
 * @class StreamerApi
 * @extends {BaseAPI}
 */
export class StreamerApi extends BaseAPI {
    /**
     * 
     * @summary 스트리머 ID로 조회
     * @param {number} id 스트리머 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public streamerControllerGetId(id: number, options?: AxiosRequestConfig) {
        return StreamerApiFp(this.configuration).streamerControllerGetId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스트리머 생방송 여부 조회 ID로 조회
     * @param {number} id 스트리머 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public streamerControllerGetIdLive(id: number, options?: AxiosRequestConfig) {
        return StreamerApiFp(this.configuration).streamerControllerGetIdLive(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스트리머 이름으로 조회
     * @param {string} name 스트리머 로그인 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public streamerControllerGetName(name: string, options?: AxiosRequestConfig) {
        return StreamerApiFp(this.configuration).streamerControllerGetName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스트리머 생방송 여부 조회
     * @param {string} name 스트리머 로그인 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public streamerControllerGetNameLive(name: string, options?: AxiosRequestConfig) {
        return StreamerApiFp(this.configuration).streamerControllerGetNameLive(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 트게더 API Route
     * @summary 스트리머 트게더 게시판 존재 여부 조회
     * @param {string} name 스트리머 로그인 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public streamerControllerGetNameTgd(name: string, options?: AxiosRequestConfig) {
        return StreamerApiFp(this.configuration).streamerControllerGetNameTgd(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * api.twip.kr/user/{username} API Route (프론트에서 fallback으로 twip api 직접 호출해서 사용해도 무방)
     * @summary 스트리머 트윕 정보 조회
     * @param {string} name 스트리머 로그인 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public streamerControllerGetNameTwip(name: string, options?: AxiosRequestConfig) {
        return StreamerApiFp(this.configuration).streamerControllerGetNameTwip(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 스트리머 검색
     * @param {string} q 검색어 (2자 이상)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamerApi
     */
    public streamerControllerGetSearch(q: string, options?: AxiosRequestConfig) {
        return StreamerApiFp(this.configuration).streamerControllerGetSearch(q, options).then((request) => request(this.axios, this.basePath));
    }
}


